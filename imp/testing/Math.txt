let Math = fix \math :
  { zero     : Nat -> Bool
  , one      : Nat -> Bool
  , even     : Nat -> Bool
  , odd      : Nat -> Bool
  , equals   : Nat -> Nat -> Bool
  , lessThan : Nat -> Nat -> Bool
  , add      : Nat -> Nat -> Nat
  , sub      : Nat -> Nat -> Nat
  , mult     : Nat -> Nat -> Nat
  , div      : Nat -> Nat -> Nat
  , fac      : Nat -> Nat
  , fib      : Nat -> Nat
  , square   : Nat -> Nat
  , exp      : Nat -> Nat -> Nat
  }.
    
{ zero = \n : Nat. iszero n

, one = \n : Nat. case n of 1 -> True;
		            _ -> False

, even = \n : Nat. case n of 0 -> True;
	                     _ -> math.odd (pred n)

, odd = \n : Nat. case n of 0 -> False;
                            _ -> math.even (pred n)

, equals = \a : Nat. \b : Nat.
             case (a,b) of
	       (0,0) -> True;
	       (_,0) -> False;
	       (0,_) -> False;
	       _     -> math.equals (pred a) (pred b)

, lessThan = \a : Nat. \b : Nat.
               case (a,b) of
	         (_,0) -> False;
	         (0,_) -> True;
		 _     -> math.lessThan (pred a) (pred b)

, add = \a : Nat. \b : Nat.
          case (a,b) of
	    (0,_) -> b;
	    (_,0) -> a;
	    _     -> math.add (pred a) (succ b)

, sub = \a : Nat. \b : Nat.
          if iszero a
	    then 0
	    else if iszero b
	      then a
	      else math.sub (pred a) (pred b)

, mult = \a : Nat. \b : Nat.
           if iszero a
           then 0
	     else if iszero b
	       then 0
	       else math.add (math.mult (pred a) b) b

, div = \a : Nat. \b : Nat.
          if iszero b
	    then 0
	    else let div0 = fix \d : Nat -> Nat -> Nat -> Nat.
	           \acc : Nat. \aa : Nat. \bb : Nat.
	             if math.lessThan aa bb
		       then acc
		       else d (succ acc) (math.sub aa bb) bb
	         in div0 0 a b

, fac = \n : Nat.
          if iszero n
	    then 1
	    else math.mult n (math.fac (pred n))

, fib = \n : Nat.
          case n of
	    0 -> 0;
	    1 -> 1;
	    _ -> let f1 = math.fib (pred n)
	      in let f2 = math.fib (math.sub n 2)
		in math.add f1 f2

, square = \n : Nat. math.mult n n

, exp = \a : Nat. \b : Nat.
          if iszero b
            then 1
	    else let back = math.exp a (pred b)
              in math.mult a back
}

in 
